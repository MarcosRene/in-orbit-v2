/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * in.orbit
 * OpenAPI spec version: 1.0.0
 */
export type GetUserExperienceAndLevel200 = {
  experience: number;
  level: number;
  experienceToNextLevel: number;
};

export type GetProfile200Profile = {
  id: string;
  /** @nullable */
  name: string | null;
  /** @nullable */
  email: string | null;
  avatarUrl: string;
};

export type GetProfile200 = {
  profile: GetProfile200Profile;
};

export type GetWeekPendingGoals200PendingGoalsItem = {
  id: string;
  title: string;
  desiredWeeklyFrequency: number;
  completionCount: number;
};

export type GetWeekPendingGoals200 = {
  pendingGoals: GetWeekPendingGoals200PendingGoalsItem[];
};

export type GetWeekSummary200SummaryGoalsPerDayItem = {
  id: string;
  title: string;
  completedAt: string;
};

export type GetWeekSummary200SummaryGoalsPerDay = {[key: string]: GetWeekSummary200SummaryGoalsPerDayItem[]};

export type GetWeekSummary200Summary = {
  completed: number;
  total: number;
  goalsPerDay: GetWeekSummary200SummaryGoalsPerDay;
};

export type GetWeekSummary200 = {
  summary: GetWeekSummary200Summary;
};

export type GetWeekSummaryParams = {
weekStartsAt?: string;
};

/**
 * @nullable
 */
export type CreateGoalCompletion200 = typeof CreateGoalCompletion200[keyof typeof CreateGoalCompletion200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateGoalCompletion200 = {
  null: 'null',
} as const;

export type CreateGoalCompletionBody = {
  goalId: string;
};

/**
 * @nullable
 */
export type CreateGoal201 = typeof CreateGoal201[keyof typeof CreateGoal201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateGoal201 = {
  null: 'null',
} as const;

export type CreateGoalBody = {
  title: string;
  /**
   * @minimum 1
   * @maximum 7
   */
  desiredWeeklyFrequency: number;
};

export type AuthenticateFromGithub201 = {
  token: string;
};

export type AuthenticateFromGithubBody = {
  code: string;
};



/**
 * Authenticate user from Github code
 */
export type authenticateFromGithubResponse = {
  data: AuthenticateFromGithub201;
  status: number;
  headers: Headers;
}

export const getAuthenticateFromGithubUrl = () => {


  return `http://localhost:3333/auth/github`
}

export const authenticateFromGithub = async (authenticateFromGithubBody: AuthenticateFromGithubBody, options?: RequestInit): Promise<authenticateFromGithubResponse> => {
  
  const res = await fetch(getAuthenticateFromGithubUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      authenticateFromGithubBody,)
  }
)

  const data:AuthenticateFromGithub201 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Create a goal
 */
export type createGoalResponse = {
  data: CreateGoal201;
  status: number;
  headers: Headers;
}

export const getCreateGoalUrl = () => {


  return `http://localhost:3333/goals`
}

export const createGoal = async (createGoalBody: CreateGoalBody, options?: RequestInit): Promise<createGoalResponse> => {
  
  const res = await fetch(getCreateGoalUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createGoalBody,)
  }
)

  const data:CreateGoal201 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Complete a goal
 */
export type createGoalCompletionResponse = {
  data: CreateGoalCompletion200;
  status: number;
  headers: Headers;
}

export const getCreateGoalCompletionUrl = () => {


  return `http://localhost:3333/completions`
}

export const createGoalCompletion = async (createGoalCompletionBody: CreateGoalCompletionBody, options?: RequestInit): Promise<createGoalCompletionResponse> => {
  
  const res = await fetch(getCreateGoalCompletionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createGoalCompletionBody,)
  }
)

  const data:CreateGoalCompletion200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Get week summary
 */
export type getWeekSummaryResponse = {
  data: GetWeekSummary200;
  status: number;
  headers: Headers;
}

export const getGetWeekSummaryUrl = (params?: GetWeekSummaryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/summary?${normalizedParams.toString()}` : `http://localhost:3333/summary`
}

export const getWeekSummary = async (params?: GetWeekSummaryParams, options?: RequestInit): Promise<getWeekSummaryResponse> => {
  
  const res = await fetch(getGetWeekSummaryUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const data:GetWeekSummary200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Get pending goals
 */
export type getWeekPendingGoalsResponse = {
  data: GetWeekPendingGoals200;
  status: number;
  headers: Headers;
}

export const getGetWeekPendingGoalsUrl = () => {


  return `http://localhost:3333/pending-goals`
}

export const getWeekPendingGoals = async ( options?: RequestInit): Promise<getWeekPendingGoalsResponse> => {
  
  const res = await fetch(getGetWeekPendingGoalsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const data:GetWeekPendingGoals200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Get authenticated user profile
 */
export type getProfileResponse = {
  data: GetProfile200;
  status: number;
  headers: Headers;
}

export const getGetProfileUrl = () => {


  return `http://localhost:3333/profile`
}

export const getProfile = async ( options?: RequestInit): Promise<getProfileResponse> => {
  
  const res = await fetch(getGetProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const data:GetProfile200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Get user experience and level
 */
export type getUserExperienceAndLevelResponse = {
  data: GetUserExperienceAndLevel200;
  status: number;
  headers: Headers;
}

export const getGetUserExperienceAndLevelUrl = () => {


  return `http://localhost:3333/profile/gamification`
}

export const getUserExperienceAndLevel = async ( options?: RequestInit): Promise<getUserExperienceAndLevelResponse> => {
  
  const res = await fetch(getGetUserExperienceAndLevelUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const data:GetUserExperienceAndLevel200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



